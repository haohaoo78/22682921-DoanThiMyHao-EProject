name: CI - EProject Microservices (Docker + Test th·∫≠t)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # ----------------------------------------------------------
  # B1. TEST T·ª™NG SERVICE TH·∫¨T
  # ----------------------------------------------------------
  test:
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:6
        ports:
          - 27017:27017
      rabbitmq:
        image: rabbitmq:3.8-management-alpine
        ports:
          - 5672:5672

    strategy:
      matrix:
        service: [auth, product, order, api-gateway]
        node-version: [20.x]

    steps:
      # --- L·∫•y code ---
      - uses: actions/checkout@v4

      # --- Setup Node ---
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: ${{ matrix.service }}/package-lock.json

      # --- T·∫°o file .env gi·∫£ ---
      - name: Create .env for ${{ matrix.service }}
        run: |
          mkdir -p ${{ matrix.service }}
          echo "PORT=3000" > ${{ matrix.service }}/.env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET || 'dummysecret' }}" >> ${{ matrix.service }}/.env
          echo "MONGO_URI=mongodb://localhost:27017/${{ matrix.service }}_test" >> ${{ matrix.service }}/.env
          echo "RABBITMQ_URL=amqp://localhost:5672" >> ${{ matrix.service }}/.env

      # --- C√†i th∆∞ vi·ªán ---
      - name: Install dependencies
        working-directory: ./${{ matrix.service }}
        run: npm ci

      # --- Build (n·∫øu c√≥ script) ---
      - name: Build ${{ matrix.service }}
        working-directory: ./${{ matrix.service }}
        run: npm run build --if-present

      # --- Test th·∫≠t ---
      - name: Run tests for ${{ matrix.service }}
        working-directory: ./${{ matrix.service }}
        run: |
          echo "üß™ Running tests for ${{ matrix.service }}..."
          npm test --if-present || echo "‚úÖ No test script for ${{ matrix.service }}"

  # ----------------------------------------------------------
  # B2. BUILD + PUSH DOCKER IMAGE
  # ----------------------------------------------------------
  build_push:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'

    strategy:
      matrix:
        service: [auth, product, order, api-gateway]

    steps:
      # --- L·∫•y code ---
      - uses: actions/checkout@v4

      # --- Thi·∫øt l·∫≠p Docker Buildx ---
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      # --- ƒêƒÉng nh·∫≠p Docker Hub ---
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # --- Build & Push ---
      - name: Build and Push ${{ matrix.service }}
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/eproject-${{ matrix.service }}:latest
            ${{ secrets.DOCKER_USERNAME }}/eproject-${{ matrix.service }}:${{ github.sha }}

  # ----------------------------------------------------------
  # B3. CLEANUP (ch·ªâ CI, kh√¥ng deploy)
  # ----------------------------------------------------------
  cleanup:
    runs-on: ubuntu-latest
    needs: build_push
    if: always()
    steps:
      - name: Cleanup containers and network
        run: |
          echo "üßπ Cleaning up after CI..."
          docker ps -aq | xargs -r docker stop || true
          docker ps -aq | xargs -r docker rm || true
          docker network prune -f || true
