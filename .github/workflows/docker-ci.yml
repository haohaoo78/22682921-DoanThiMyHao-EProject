name: CI/CD EProject Microservices

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test:
    runs-on: ubuntu-latest

    services:
      mongo:
        image: mongo:6
        ports:
          - 27017:27017
        options: >-
          --health-cmd="mongosh --eval 'db.runCommand({ ping: 1 })'" 
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      rabbitmq:
        image: rabbitmq:3-management
        ports:
          - 5672:5672
          - 15672:15672
        env:
          RABBITMQ_DEFAULT_USER: ${{ secrets.RABBITMQ_USER }}
          RABBITMQ_DEFAULT_PASS: ${{ secrets.RABBITMQ_PASS }}
        options: >-
          --health-cmd="rabbitmqctl status"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: 20

      # --- Test Auth service ---
      - name: Build & Test Auth
        run: |
          docker build -t auth-service ./auth
          docker run -d --name auth \
            -e MONGODB_AUTH_URI="mongodb://localhost:27017/auth_db" \
            -e JWT_SECRET="${{ secrets.JWT_SECRET }}" \
            -e RABBITMQ_HOST="localhost" \
            -e RABBITMQ_PORT="5672" \
            -e RABBITMQ_USER="${{ secrets.RABBITMQ_USER }}" \
            -e RABBITMQ_PASS="${{ secrets.RABBITMQ_PASS }}" \
            --memory=1024m \
            auth-service
          sleep 15
          docker exec auth npm test
          docker stop auth && docker rm auth

      # --- Test Product service ---
      - name: Build & Test Product
        run: |
          docker build -t product-service ./product
          docker run -d --name product \
            -e MONGODB_PRODUCT_URI="mongodb://localhost:27017/product_db" \
            -e RABBITMQ_HOST="localhost" \
            -e RABBITMQ_PORT="5672" \
            -e RABBITMQ_USER="${{ secrets.RABBITMQ_USER }}" \
            -e RABBITMQ_PASS="${{ secrets.RABBITMQ_PASS }}" \
            --memory=1024m \
            product-service
          sleep 15
          docker exec product npm test
          docker stop product && docker rm product

      # --- Test Order service ---
      - name: Build & Test Order
        run: |
          docker build -t order-service ./order
          docker run -d --name order \
            -e MONGODB_ORDER_URI="mongodb://localhost:27017/order_db" \
            -e RABBITMQ_HOST="localhost" \
            -e RABBITMQ_PORT="5672" \
            -e RABBITMQ_USER="${{ secrets.RABBITMQ_USER }}" \
            -e RABBITMQ_PASS="${{ secrets.RABBITMQ_PASS }}" \
            --memory=1024m \
            order-service
          sleep 15
          docker exec order npm test
          docker stop order && docker rm order
