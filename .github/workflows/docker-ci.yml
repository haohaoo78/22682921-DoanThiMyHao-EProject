name: CI/CD EProject Microservices

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test:
    runs-on: ubuntu-latest

    services:
      mongo:
        image: mongo:6
        ports:
          - 27017:27017
        options: >-
          --health-cmd="mongosh --eval 'db.runCommand({ ping: 1 })'" 
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      rabbitmq:
        image: rabbitmq:3-management
        ports:
          - 5672:5672
          - 15672:15672
        env:
          RABBITMQ_DEFAULT_USER: ${{ secrets.RABBITMQ_USER }}
          RABBITMQ_DEFAULT_PASS: ${{ secrets.RABBITMQ_PASS }}
        options: >-
          --health-cmd="rabbitmqctl status"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      # 1Ô∏è‚É£ Checkout code
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2Ô∏è‚É£ Build Auth service
      - name: Build Auth service
        run: docker build -t auth-service ./auth

      # 3Ô∏è‚É£ Build Product service
      - name: Build Product service
        run: docker build -t product-service ./product

      # 4Ô∏è‚É£ Build Order service
      - name: Build Order service
        run: docker build -t order-service ./order

      # 5Ô∏è‚É£ Run Auth container
      - name: Run Auth container
        run: |
          docker run -d --name auth \
            -e MONGODB_AUTH_URI="${{ secrets.MONGODB_AUTH_URI }}" \
            -e JWT_SECRET="${{ secrets.JWT_SECRET }}" \
            -e RABBITMQ_HOST="rabbitmq" \
            -e RABBITMQ_PORT="5672" \
            -e RABBITMQ_USER="${{ secrets.RABBITMQ_USER }}" \
            -e RABBITMQ_PASS="${{ secrets.RABBITMQ_PASS }}" \
            --link mongo:mongo \
            --link rabbitmq:rabbitmq \
            auth-service

      # 6Ô∏è‚É£ Run Product container
      - name: Run Product container
        run: |
          docker run -d --name product \
            -e MONGODB_PRODUCT_URI="${{ secrets.MONGODB_PRODUCT_URI }}" \
            -e RABBITMQ_HOST="rabbitmq" \
            -e RABBITMQ_PORT="5672" \
            -e RABBITMQ_USER="${{ secrets.RABBITMQ_USER }}" \
            -e RABBITMQ_PASS="${{ secrets.RABBITMQ_PASS }}" \
            --link mongo:mongo \
            --link rabbitmq:rabbitmq \
            product-service

      # 7Ô∏è‚É£ Run Order container
      - name: Run Order container
        run: |
          docker run -d --name order \
            -e MONGODB_ORDER_URI="${{ secrets.MONGODB_ORDER_URI }}" \
            -e RABBITMQ_HOST="rabbitmq" \
            -e RABBITMQ_PORT="5672" \
            -e RABBITMQ_USER="${{ secrets.RABBITMQ_USER }}" \
            -e RABBITMQ_PASS="${{ secrets.RABBITMQ_PASS }}" \
            --link mongo:mongo \
            --link rabbitmq:rabbitmq \
            order-service

      # 8Ô∏è‚É£ Wait for containers
      - name: Wait for services
        run: sleep 10

      # 9Ô∏è‚É£ Test Auth service
      - name: Test Auth service
        run: docker exec auth npm test

      # üîü Test Product service
      - name: Test Product service
        run: docker exec product npm test

      # 1Ô∏è‚É£1Ô∏è‚É£ Test Order service
      - name: Test Order service
        run: docker exec order npm test

      # 1Ô∏è‚É£2Ô∏è‚É£ Stop all containers
      - name: Stop all containers
        run: |
          docker stop auth
          docker stop product
          docker stop order
