name: CI/CD EProject Microservices

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mongo:
        image: mongo:6
        ports:
          - 27017:27017
        options: >-
          --health-cmd="mongosh --eval 'db.runCommand({ ping: 1 })'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      rabbitmq:
        image: rabbitmq:3-management
        ports:
          - 5672:5672
          - 15672:15672
        env:
          RABBITMQ_DEFAULT_USER: ${{ secrets.RABBITMQ_USER }}
          RABBITMQ_DEFAULT_PASS: ${{ secrets.RABBITMQ_PASS }}
        options: >-
          --health-cmd="rabbitmqctl status"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      # --- Install dependencies ---
      - name: Install dependencies
        run: |
          cd auth && npm install
          cd ../product && npm install
          cd ../order && npm install

      # --- Start Auth service in background ---
      - name: Start Auth service (background)
        run: |
          cd auth
          node src/app.js &
          sleep 10
        env:
          MONGODB_AUTH_URI: "mongodb://localhost:27017/auth_db"
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          RABBITMQ_HOST: "localhost"
          RABBITMQ_PORT: "5672"
          RABBITMQ_USER: ${{ secrets.RABBITMQ_USER }}
          RABBITMQ_PASS: ${{ secrets.RABBITMQ_PASS }}

      # --- Create test user for Product ---
      - name: Create test user in Auth DB
        run: |
          node -e "
            const mongoose = require('mongoose');
            const bcrypt = require('bcryptjs');
            const User = require('./auth/src/models/user');
            (async () => {
              await mongoose.connect('mongodb://localhost:27017/auth_db');
              const password = await bcrypt.hash('Shatou5114*', 10);
              await User.deleteMany({ username: 'Haohao78091111' });
              await User.create({ username: 'Haohao78091111', password });
              console.log('âœ… Test user created successfully');
              process.exit(0);
            })();
          "

      # --- Test Auth service ---
      - name: Run Auth tests
        run: |
          cd auth
          npx mocha --timeout 20000 src/test/**/*.test.js --exit --parallel=false
        env:
          MONGODB_AUTH_URI: "mongodb://localhost:27017/auth_db"
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          RABBITMQ_HOST: "localhost"
          RABBITMQ_PORT: "5672"
          RABBITMQ_USER: ${{ secrets.RABBITMQ_USER }}
          RABBITMQ_PASS: ${{ secrets.RABBITMQ_PASS }}

      # --- Test Product service ---
      - name: Run Product tests (Auth alive)
        run: |
          cd product
          npx mocha --timeout 20000 src/test/**/*.test.js --exit --parallel=false
        env:
          MONGODB_PRODUCT_URI: "mongodb://localhost:27017/product_db"
          AUTH_SERVICE_URL: "http://localhost:4001"
          RABBITMQ_HOST: "localhost"
          RABBITMQ_PORT: "5672"
          RABBITMQ_USER: ${{ secrets.RABBITMQ_USER }}
          RABBITMQ_PASS: ${{ secrets.RABBITMQ_PASS }}
          TEST_USER: "Haohao78091111"
          TEST_PASS: "Shatou5114*"

      # --- (Optional) Test Order service ---
      - name: Run Order tests
        run: |
          cd order
          npx mocha --timeout 20000 src/test/**/*.test.js --exit --parallel=false
        env:
          MONGODB_ORDER_URI: "mongodb://localhost:27017/order_db"
          RABBITMQ_HOST: "localhost"
          RABBITMQ_PORT: "5672"
          RABBITMQ_USER: ${{ secrets.RABBITMQ_USER }}
          RABBITMQ_PASS: ${{ secrets.RABBITMQ_PASS }}
          AUTH_SERVICE_URL: "http://localhost:4001"
          PRODUCT_SERVICE_URL: "http://localhost:4002"
