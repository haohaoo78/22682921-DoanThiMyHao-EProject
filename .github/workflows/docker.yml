name: CI/CD EProject Microservices

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # --- B1. Checkout repository ---
      - name: Checkout repository
        uses: actions/checkout@v3

      # --- B2. Create .env files for test ---
      - name: Create .env files
        run: |
          mkdir -p auth product

          # Auth service (port test 4001)
          echo "MONGODB_AUTH_URI=${{ secrets.MONGODB_AUTH_URI }}" > auth/.env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> auth/.env
          echo "LOGIN_TEST_USER=${{ secrets.LOGIN_TEST_USER }}" >> auth/.env
          echo "LOGIN_TEST_PASSWORD=${{ secrets.LOGIN_TEST_PASSWORD }}" >> auth/.env
          echo "PORT=4001" >> auth/.env

          # Product service (port test 4000)
          echo "MONGODB_PRODUCT_URI=${{ secrets.MONGODB_PRODUCT_URI }}" > product/.env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> product/.env
          echo "AUTH_SERVICE_URL=http://localhost:4001" >> product/.env
          echo "PORT=4000" >> product/.env
          echo "RABBITMQ_HOST=${{ secrets.RABBITMQ_HOST }}" >> product/.env
          echo "RABBITMQ_PORT=${{ secrets.RABBITMQ_PORT }}" >> product/.env
          echo "RABBITMQ_USER=${{ secrets.RABBITMQ_USER }}" >> product/.env
          echo "RABBITMQ_PASS=${{ secrets.RABBITMQ_PASS }}" >> product/.env

      # --- B3. Build Docker images ---
      - name: Build Docker images
        run: |
          docker build -t auth-service ./auth
          docker build -t product-service ./product

      # --- B4. Create Docker network ---
      - name: Create Docker network
        run: docker network create eproject-net || true

      # --- B5. Start MongoDB ---
      - name: Start MongoDB
        run: docker run -d --name mongo --network eproject-net mongo:6

      # --- B6. Start RabbitMQ ---
      - name: Start RabbitMQ
        run: |
          docker run -d --name rabbitmq \
            --network eproject-net \
            -e RABBITMQ_DEFAULT_USER=${{ secrets.RABBITMQ_USER }} \
            -e RABBITMQ_DEFAULT_PASS=${{ secrets.RABBITMQ_PASS }} \
            rabbitmq:3-management
          sleep 10

      # --- B7. Start Auth service (publish port 3000) ---
      - name: Start Auth service
        run: |
          docker run -d --name auth --network eproject-net -p 3000:3000 --env-file ./auth/.env auth-service
          for i in {1..20}; do
            if curl -s http://localhost:3000/health; then break; else sleep 3; fi
          done

      # --- B8. Start Product service (publish port 4000) ---
      - name: Start Product service
        run: |
          docker run -d --name product --network eproject-net -p 4000:4000 --env-file ./product/.env product-service
          for i in {1..20}; do
            if curl -s http://localhost:4000/health; then break; else sleep 3; fi
          done

      # --- B9. Run tests from host runner ---
      - name: Run Auth tests
        run: npm --prefix ./auth test

      - name: Run Product tests
        run: npm --prefix ./product test

      # --- B10. Cleanup ---
      - name: Cleanup
        if: always()
        run: |
          docker stop auth product mongo rabbitmq || true
          docker rm auth product mongo rabbitmq || true
          docker network rm eproject-net || true
