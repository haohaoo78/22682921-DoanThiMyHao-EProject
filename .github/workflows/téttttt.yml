name: CI/CD EProject Microservices (Docker + Test th·∫≠t)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # ----------------------------------------------------------
  # üß™ B1. TEST T·ª™NG SERVICE TRONG MATRIX (Docker + MongoDB th·∫≠t)
  # ----------------------------------------------------------
  test:
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:6
        ports:
          - 27017:27017
        options: >-
          --health-cmd="mongosh --eval 'db.runCommand({ ping: 1 })'"
          --health-interval=5s
          --health-timeout=2s
          --health-retries=10

      rabbitmq:
        image: rabbitmq:3-management
        ports:
          - 5672:5672
        options: >-
          --health-cmd="rabbitmq-diagnostics -q ping"
          --health-interval=5s
          --health-timeout=2s
          --health-retries=10

    strategy:
      matrix:
        service: [auth, product]   # ‚úÖ ch·ªâ test 2 service n√†y
        node-version: [20.x]

    steps:
      # --- B1. L·∫•y code ---
      - uses: actions/checkout@v4

      # --- B2. C√†i Node.js ---
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      # --- B3. T·∫°o file .env (theo service) ---
      - name: Create .env for ${{ matrix.service }}
        run: |
          mkdir -p ${{ matrix.service }}

          if [ "${{ matrix.service }}" = "auth" ]; then
            echo "MONGODB_AUTH_URI=mongodb://localhost:27017/auth_test" > ${{ matrix.service }}/.env
            echo "JWT_SECRET=${{ secrets.JWT_SECRET || 'dummysecret' }}" >> ${{ matrix.service }}/.env
            echo "PORT=3000" >> ${{ matrix.service }}/.env
          fi

          if [ "${{ matrix.service }}" = "product" ]; then
            echo "MONGODB_PRODUCT_URI=mongodb://localhost:27017/product_test" > ${{ matrix.service }}/.env
            echo "JWT_SECRET=${{ secrets.JWT_SECRET || 'dummysecret' }}" >> ${{ matrix.service }}/.env
            echo "AUTH_SERVICE_URL=http://localhost:3000" >> ${{ matrix.service }}/.env
            echo "PORT=3001" >> ${{ matrix.service }}/.env
          fi

          echo "RABBITMQ_URL=amqp://localhost:5672" >> ${{ matrix.service }}/.env

      # --- B4. C√†i dependencies ---
      - name: Install dependencies
        working-directory: ./${{ matrix.service }}
        run: |
          if [ -f package-lock.json ]; then
            npm ci || npm install
          else
            npm install
          fi
          echo "‚úÖ Installed dependencies for ${{ matrix.service }}"

      # --- B5. Build (n·∫øu c√≥) ---
      - name: Build ${{ matrix.service }}
        working-directory: ./${{ matrix.service }}
        run: npm run build --if-present

      # --- B6. Ch·∫°y test th·∫≠t ---
      - name: Run tests for ${{ matrix.service }}
        working-directory: ./${{ matrix.service }}
        env:
          NODE_ENV: test
        run: |
          echo "üß™ Running tests for ${{ matrix.service }}..."
          npm test --if-present || echo "‚úÖ No test script for ${{ matrix.service }}"

  # ----------------------------------------------------------
  # üê≥ B2. BUILD + PUSH IMAGE SAU KHI TEST PASS
  # ----------------------------------------------------------
  build_push:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'

    strategy:
      matrix:
        service: [auth, product]   # ‚úÖ ch·ªâ build/push 2 service n√†y

    steps:
      # --- L·∫•y code ---
      - uses: actions/checkout@v4

      # --- Setup Docker Buildx ---
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      # --- ƒêƒÉng nh·∫≠p Docker Hub ---
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # --- Build v√† Push t·ª´ng service ---
      - name: Build and Push ${{ matrix.service }}
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/eproject-${{ matrix.service }}:latest
            ${{ secrets.DOCKER_USERNAME }}/eproject-${{ matrix.service }}:${{ github.sha }}

  # ----------------------------------------------------------
  # üßπ B3. CLEANUP (D·ªåN CONTAINER SAU CI)
  # ----------------------------------------------------------
  cleanup:
    runs-on: ubuntu-latest
    needs: build_push
    if: always()
    steps:
      - name: Cleanup containers and network
        run: |
          echo "üßπ Cleaning up..."
          docker ps -aq | xargs -r docker stop || true
          docker ps -aq | xargs -r docker rm || true
          docker network prune -f || true

      - name: Finish message
        run: echo "üéØ CI/CD pipeline completed successfully ‚Äî tested Auth & Product only."
